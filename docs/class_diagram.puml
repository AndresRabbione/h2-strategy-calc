@startuml HelldiversStrategyCalculator
title Class Diagram - Helldivers Strategy Calculator

abstract class CalculatorStrategy {
    # priorityTable: PriorityTable
    # impactModifier: number
    # timeLimit: number
    # targetedPlanetIds: number[]
    # routeTable: SupplyLines

    # {abstract} calcMinOffense(planet: Planet): number
    # {abstract} calcRouteResistance(planets: Planet[]): number
    # async getAllRoutes(startingPlanet: Planet, currentRoute: Planet[] = [], visited: Set<number> = new Set()): Promise<Planet[][]>
    # async findAllRoutes(planet: Planet): Promise<Planet[][]>
    # async findAllGambits(): Promise<Planet[][]>
    + {abstract} calcMinPercentage(planet: Planet): number;
    + async findShortestRoute(planet: Planet): Promise<Planet[]>
    + async isPlanetAvailable(planet: Planet): Promise<boolean>
}

class LiberationStrategy extends CalculatorStrategy {

}

class MOParser {
    - parseFactionId(factionId: number): Factions
    - parseEnemyId(enemyId: numebr): Enemies
    - async parsePlanetObj(objective: Task, progress: number): Promise<Objective>
    - async parseOperationObj(objective: Task, progress: number): Promise<Objective>
    - async parseKillObj(objective: Task, progress: number): Promise<Objective>
    + async getParsedObjective(objective: Task, progress: number): Promise<Objective | null>
    + isValidMO(majorOrder: MajorOrder): boolean
}

class StrategyFactory {
    - majorOrderParser: MOParser
    - currentMajorOrder: MajorOrder

    + async generateNewStrategy(): Promise<CalculatorStrategy>
    - async getParsedMO(): Promise<ParsedMO | null>

}

abstract class Objective {
    + completed: boolean
    + type: ObjectiveTypes
}

class PlanetObjective extends Objective {
    + target: Planet
}

class KillObjective extends Objective {
    + faction: Factions | null
    + enemy: numebr | null
    + amount: number
    + planet: Planet | null
}

class CollectionObjective extends Objective {
    + Faction: Factions | null
    + planet: Planet | null
    + item: number
    + amount: number
}

class DefendAmountObjective extends Objective {
    + faction: Factions | null
    + amount: number
}

class OperationObjective extends Objective {
    + difficulty: number | null
    + amount: number
    + faction: Factions | null
    + planet: Planet | null
}

class LiberateMoreObjective extends Objective {
    + faction: Factions | null
    + liberatedPlanetCount: number
    + lostPlanetCount: number
}

enum Factions {
    HUMANS = "Humans"
    TERMINIDS = "Terminids"
    AUTOMATONS = "Automaton"
    ILLUMINATE = "Illuminate"
}

enum FactionIDs {
    HUMANS = 1
    TERMINIDS = 2
    AUTOMATONS = 3
    ILLUMINATE = 4
}

enum RegionSizes {
    SETTLEMENT = "Settlement"
    TOWN = "Town"
    CITY = "City"
    MEGACITY = "MegaCity"
}

enum ObjectiveTypes {
    'TODO: Find the IDs
    HOLD = 13,
    LIBERATE = 11?,
    OPERATIONS = 9,
    KILL = 3?,
    COLLECT,
    DEFEND_AMOUNT,
    LIBERATE_MORE,
    DEFEND = 12?
}

enum ValueTypes {
    'These values need checking
    TARGET_FACTION = 1?,
    AMOUNT = 3,
    LIBERATION_REQUIRED = 11?,
    PLANET_ID = 12,
    DIFFICULTY = 9,
    ENEMY,
}

enum Enemies {
    'Empty for now
}

struct ParsedMO {
    id: number
    endDate: Date
    timeRemaining: number
    objectives: Objective[]
}

'Relations
StrategyFactory o-- MOParser
MOParser <-- Objective : Created by
StrategyFactory <.. CalculatorStrategy : Created by